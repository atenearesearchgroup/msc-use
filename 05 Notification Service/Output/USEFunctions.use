class Choreographer
attributes

operations
notificationservice_unsubscribe(sender : String, receiver : NotificationService)
begin
(self.user->any(ins: User_Ch | ins.id = sender)).notificationservice_unsubscribe(receiver);
end

notificationservice_subscribe(sender : String, receiver : NotificationService)
begin
(self.user->any(ins: User_Ch | ins.id = sender)).notificationservice_subscribe(receiver);
end

user_notify(sender : String, receiver : User)
begin
(self.notificationservice->any(ins: NotificationService_Ch | ins.id = sender)).user_notify(receiver);
end

notificationservice_event(sender : String, receiver : NotificationService)
begin
(self.provider->any(ins: Provider_Ch | ins.id = sender)).notificationservice_event(receiver);
end

end

class User_Ch < User
attributes
id : String
operations
notificationservice_unsubscribe(receiver : NotificationService)
begin
receiver.unsubscribe();
end

notificationservice_subscribe(receiver : NotificationService)
begin
receiver.subscribe();
end

end

class NotificationService_Ch < NotificationService
attributes
id : String
operations
user_notify(receiver : User)
begin
receiver.notify();
end

end

class Provider_Ch < Provider
attributes
id : String
operations
notificationservice_event(receiver : NotificationService)
begin
receiver.event();
end

end

association Rel_User_Ch between
User_Ch [0..*] role user
Choreographer [0..*] role ch
end

association Rel_NotificationService_Ch between
NotificationService_Ch [0..*] role notificationservice
Choreographer [0..*] role ch
end

association Rel_Provider_Ch between
Provider_Ch [0..*] role provider
Choreographer [0..*] role ch
end

